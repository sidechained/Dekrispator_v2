declare filename "mydsp.dsp"; declare name "mydsp"; declare version "2.50.2";
declare compile_options "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path0 "/libraries/stdfaust.lib";
declare library_path1 "/libraries/noises.lib";
declare library_path2 "/libraries/filters.lib";
declare library_path3 "/libraries/maths.lib";
declare library_path4 "/libraries/platform.lib";
declare filename "FaustDSP";
declare filters_lib_fir_author "Julius O. Smith III";
declare filters_lib_fir_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_fir_license "MIT-style STK-4.3 license";
declare filters_lib_iir_author "Julius O. Smith III";
declare filters_lib_iir_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_iir_license "MIT-style STK-4.3 license";
declare filters_lib_lowpass0_highpass1 "MIT-style STK-4.3 license";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_resonlp_author "Julius O. Smith III";
declare filters_lib_resonlp_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_resonlp_license "MIT-style STK-4.3 license";
declare filters_lib_tf2_author "Julius O. Smith III";
declare filters_lib_tf2_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf2_license "MIT-style STK-4.3 license";
declare filters_lib_tf2s_author "Julius O. Smith III";
declare filters_lib_tf2s_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf2s_license "MIT-style STK-4.3 license";
declare filters_lib_version "0.3";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare name "FaustDSP";
declare noises_lib_name "Faust Noise Generator Library";
declare noises_lib_version "0.4";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.2";
ID_0 = _, 12345;
ID_1 = (ID_0 : +);
ID_2 = _, 1103515245;
ID_3 = (ID_2 : *);
ID_4 = ID_1 ~ ID_3;
ID_5 = ID_4, 2.1474836e+09f;
ID_6 = ID_5 : /;
ID_7 = ID_6 : _;
ID_8 = hslider("[0]cutoffFrequencyL", 5e+02f, 5e+01f, 1e+04f, 0.01f);
ID_9 = 6.2831855f, ID_8;
ID_10 = (ID_9 : *);
ID_11 = ID_10, 0.5f;
ID_12 = (ID_11 : *);
ID_13 = fconstant(int fSamplingFreq, <math.h>);
ID_14 = 1.0f, ID_13;
ID_15 = (ID_14 : max);
ID_16 = 1.92e+05f, ID_15;
ID_17 = (ID_16 : min);
ID_18 = ID_12, ID_17;
ID_19 = ID_18 : /;
ID_20 = (ID_19 : tan);
ID_21 = 1, ID_20;
ID_22 = (ID_21 : /);
ID_23 = ID_22, ID_22;
ID_24 = (ID_23 : *);
ID_25 = 1, ID_24;
ID_26 = (ID_25 : -);
ID_27 = 2, ID_26;
ID_28 = (ID_27 : *);
ID_29 = hslider("[2]q", 5.0f, 1.0f, 3e+01f, 0.1f);
ID_30 = 1, ID_29;
ID_31 = (ID_30 : /);
ID_32 = ID_31, ID_22;
ID_33 = (ID_32 : *);
ID_34 = 1, ID_33;
ID_35 = (ID_34 : +);
ID_36 = ID_35, ID_24;
ID_37 = (ID_36 : +);
ID_38 = ID_28, ID_37;
ID_39 = (ID_38 : /);
ID_40 = _, ID_39;
ID_41 = (ID_40 : *);
ID_42 = _, 1;
ID_43 = ID_42 : @;
ID_44 = (ID_34 : -);
ID_45 = ID_44, ID_24;
ID_46 = (ID_45 : +);
ID_47 = ID_46, ID_37;
ID_48 = (ID_47 : /);
ID_49 = _, ID_48;
ID_50 = ID_49 : *;
ID_51 = (ID_43 : ID_50);
ID_52 = ID_41, ID_51;
ID_53 = ID_52 :> _;
ID_54 = (_ <: ID_53);
ID_55 = \(x1).(\(x2).(x2,x1 : -)) ~ ID_54;
ID_56 = hslider("[3]gain", 1.0f, 0.0f, 1.0f, 0.01f);
ID_57 = 0, ID_22;
ID_58 = (ID_57 : *);
ID_59 = ID_56, ID_58;
ID_60 = (ID_59 : +);
ID_61 = 0, ID_24;
ID_62 = (ID_61 : *);
ID_63 = ID_60, ID_62;
ID_64 = (ID_63 : +);
ID_65 = ID_64, ID_37;
ID_66 = (ID_65 : /);
ID_67 = _, ID_66;
ID_68 = (ID_67 : *);
ID_69 = ID_56, ID_62;
ID_70 = (ID_69 : -);
ID_71 = 2, ID_70;
ID_72 = (ID_71 : *);
ID_73 = ID_72, ID_37;
ID_74 = (ID_73 : /);
ID_75 = _, ID_74;
ID_76 = ID_75 : *;
ID_77 = (ID_43 : ID_76);
ID_78 = _, 2;
ID_79 = ID_78 : @;
ID_80 = (ID_59 : -);
ID_81 = ID_80, ID_62;
ID_82 = (ID_81 : +);
ID_83 = ID_82, ID_37;
ID_84 = (ID_83 : /);
ID_85 = _, ID_84;
ID_86 = ID_85 : *;
ID_87 = (ID_79 : ID_86);
ID_88 = ID_77, ID_87;
ID_89 = ID_68, ID_88;
ID_90 = ID_89 :> _;
ID_91 = _ <: ID_90;
ID_92 = (ID_55 : ID_91);
ID_93 = hslider("[1]cutoffFrequencyR", 5e+02f, 5e+01f, 1e+04f, 0.01f);
ID_94 = 6.2831855f, ID_93;
ID_95 = (ID_94 : *);
ID_96 = ID_95, 0.5f;
ID_97 = (ID_96 : *);
ID_98 = ID_97, ID_17;
ID_99 = ID_98 : /;
ID_100 = (ID_99 : tan);
ID_101 = 1, ID_100;
ID_102 = (ID_101 : /);
ID_103 = ID_102, ID_102;
ID_104 = (ID_103 : *);
ID_105 = 1, ID_104;
ID_106 = (ID_105 : -);
ID_107 = 2, ID_106;
ID_108 = (ID_107 : *);
ID_109 = ID_31, ID_102;
ID_110 = (ID_109 : *);
ID_111 = 1, ID_110;
ID_112 = (ID_111 : +);
ID_113 = ID_112, ID_104;
ID_114 = (ID_113 : +);
ID_115 = ID_108, ID_114;
ID_116 = (ID_115 : /);
ID_117 = _, ID_116;
ID_118 = (ID_117 : *);
ID_119 = (ID_111 : -);
ID_120 = ID_119, ID_104;
ID_121 = (ID_120 : +);
ID_122 = ID_121, ID_114;
ID_123 = (ID_122 : /);
ID_124 = _, ID_123;
ID_125 = ID_124 : *;
ID_126 = (ID_43 : ID_125);
ID_127 = ID_118, ID_126;
ID_128 = ID_127 :> _;
ID_129 = (_ <: ID_128);
ID_130 = \(x1).(\(x2).(x2,x1 : -)) ~ ID_129;
ID_131 = 0, ID_102;
ID_132 = (ID_131 : *);
ID_133 = ID_56, ID_132;
ID_134 = (ID_133 : +);
ID_135 = 0, ID_104;
ID_136 = (ID_135 : *);
ID_137 = ID_134, ID_136;
ID_138 = (ID_137 : +);
ID_139 = ID_138, ID_114;
ID_140 = (ID_139 : /);
ID_141 = _, ID_140;
ID_142 = (ID_141 : *);
ID_143 = ID_56, ID_136;
ID_144 = (ID_143 : -);
ID_145 = 2, ID_144;
ID_146 = (ID_145 : *);
ID_147 = ID_146, ID_114;
ID_148 = (ID_147 : /);
ID_149 = _, ID_148;
ID_150 = ID_149 : *;
ID_151 = (ID_43 : ID_150);
ID_152 = (ID_133 : -);
ID_153 = ID_152, ID_136;
ID_154 = (ID_153 : +);
ID_155 = ID_154, ID_114;
ID_156 = (ID_155 : /);
ID_157 = _, ID_156;
ID_158 = ID_157 : *;
ID_159 = (ID_79 : ID_158);
ID_160 = ID_151, ID_159;
ID_161 = ID_142, ID_160;
ID_162 = ID_161 :> _;
ID_163 = _ <: ID_162;
ID_164 = (ID_130 : ID_163);
ID_165 = ID_92, ID_164;
ID_166 = ID_7 <: ID_165;
process = ID_166;
